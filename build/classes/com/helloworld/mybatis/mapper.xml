<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="hw">
 	<!-- ================ 효민 ================= -->
	<!-- id와 pw가 존재하고 일치하는지 여부 -->
	<select id="idPw" resultType="int" parameterType="map">
		SELECT COUNT(*) FROM MEMBER 
		WHERE U_ID = #{id} AND PWD = #{pw}
	</select> 

	<!-- 투데이 수 불러오기 -->
	<select id="today" parameterType="string" resultType="int">
		SELECT count(*) FROM TODAY 
		 WHERE to_char(regdate,'yyyy-mm-dd') = to_char(sysdate,'yyyy-mm-dd')
		 AND u_idx = #{u_idx}
	</select>
	
	 <!-- 토탈값 불러오기 -->
	<select id="total" parameterType = "string" resultType="int">
		select count(*) from today
		 where u_idx = #{u_idx}
	</select>
	
	<!-- 프로필 조회 -->
	<select id = "profile" parameterType = "int" resultType = "com.helloworld.vo.MemberVO">
		SELECT NICKNAME,PHONE,BIRTH,EMAIL,GENDER
		FROM MEMBER 
		WHERE U_IDX= #{u_idx}
	</select>
	<!-- 프로필 수정 -->
	<update id= "pUpdate" parameterType="map">
		UPDATE MEMBER SET nickname=#{nickname}, birth=#{birth}, 
							gender=#{gender}, email=#{email},phone=#{phone}
							where u_idx=#{u_idx}
	</update>
	
	<!-- 홈페이지 방문 시 아이피 중복확인 -->
	<select id="chIp" parameterType="map" resultType="int">
		SELECT count(*) FROM today 
			WHERE to_char(regdate,'yyyy-mm-dd') = to_char(sysdate,'yyyy-mm-dd')
			      and u_idx = #{u_idx} 
			      and ip = #{ip}
	</select>
	
	<!-- 홈페이지 방문 시 아이피가 존재하지 않는다면 아이피 저장 -->
	<insert id="setIp" parameterType="map">
		INSERT INTO today (todayCnt,ip,regdate,u_idx)
			values(1,#{ip},sysdate,#{u_idx})
	</insert>
	<!-- ==================== 효민 끝 ===================== -->
	
	<!-- ==================== 민우 ======================= -->
	<!-- ================= MEMBER 테이블================== -->
	<!-- 해당 id를 가지는 멤버를 select -->
	<select id="one" parameterType="string" resultType="com.helloworld.vo.MemberVO">
		SELECT * FROM MEMBER WHERE U_ID = #{id}
	</select>
	
	<!-- 해당 닉네임을 가지는 유저를 select -->
	<select id="byNickname" parameterType="string" resultType="com.helloworld.vo.MemberVO">
		SELECT * FROM MEMBER WHERE NICKNAME = #{nickname}
	</select>
	
	<!-- 해당 idx를 가진 유저를 select -->
	<select id="selectById" parameterType="string" resultType="com.helloworld.vo.MemberVO">
		SELECT U_IDX, U_ID, NICKNAME, NAME, PHONE, BIRTH,
			EMAIL, GENDER FROM MEMBER
			WHERE U_IDX = #{u_idx}
	</select>
	<!-- ================= MEMBER 테이블 끝 ================== -->
	
	
	<!-- ================= BOARD 테이블 ================== -->
	<!-- 페이지에 해당하는 게시글 조회 -->
  	<select id="boardList" resultType="com.helloworld.vo.BoardVO" parameterType="map">
  		SELECT *
			FROM(SELECT ROWNUM R_NUM, B.*
			FROM (SELECT B_IDX, U_IDX, TITLE, CONTENT, REGDATE, NICKNAME, NVL(HIT, 0) HIT 
					FROM BOARD WHERE U_IDX = #{u_idx}
			  		ORDER BY B_IDX DESC)B)
			WHERE R_NUM BETWEEN #{begin} AND #{end}
  	</select>
  	
  	<!-- 해당 유저의 전체 게시글 수 조회 -->
  	<select id="boardCount" resultType="int" parameterType="int">
  		SELECT COUNT(*) FROM BOARD
  		WHERE U_IDX = #{u_idx}
  	</select>
  	
  	<!-- 작성한 게시글 데이터베이스에 insert -->
  	<insert id="insert" parameterType="com.helloworld.vo.BoardVO">
  		INSERT INTO BOARD (B_IDX, U_IDX, TITLE, CONTENT,
    	REGDATE, NICKNAME, HIT)
		VALUES(BOARD_SEQ.NEXTVAL, #{u_idx}, #{title},  #{content}, SYSDATE, #{nickname}, #{hit})
  	</insert>
  	
  	<!-- BOARD테이블에서 해당 글번호를 가진 게시글 select -->
  	<select id="detail" parameterType="string" resultType="com.helloworld.vo.BoardVO">
  		SELECT B_IDX, U_IDX, TITLE, CONTENT, REGDATE,
    		NICKNAME, NVL(HIT, 0) HIT 
    	FROM BOARD
		WHERE B_IDX = #{b_idx}
  	</select>
  	
  	<!-- BOARD테이블에서 해당 글번호를 가진 게시글 delete -->
  	<delete id="delete" parameterType="string">
  		DELETE FROM BOARD
  		WHERE B_IDX = #{b_idx}
  	</delete>
  	
  	<!-- BOARD테이블 내용을 새로 업데이트 -->
  	<update id="update" parameterType="map">
  		UPDATE BOARD
		SET TITLE = #{title},
		CONTENT = #{content}
		WHERE B_IDX = #{b_idx}
  	</update>
  	
  	<!-- BOARD에 댓글 insert -->
  	<insert id="boardCommentInsert" parameterType="map">
  		INSERT INTO COMMENTS (C_IDX, B_IDX, NICKNAME, REGDATE, CONTENT)
		VALUES(COMMENTS_SEQ.NEXTVAL, #{b_idx}, #{nickname}, SYSDATE, #{content})
  	</insert>
  	
  	<!-- 해당 게시글의 댓글들을 List로 받아오기 -->
  	<select id="boardCommentsAll" parameterType="string" resultType="com.helloworld.vo.CommentsVO">
  		SELECT * FROM COMMENTS	WHERE B_IDX = #{b_idx}
  		ORDER BY REGDATE ASC
  	</select>
  	
  	<!-- 해당 댓글번호에 해당하는 댓글을 지우기 -->
  	<delete id="boardCommentDelete" parameterType="string">
  		DELETE FROM COMMENTS WHERE C_IDX = #{c_idx}
  	</delete>
  	
  	<!-- 해당 글번호를 가진 게시글의 조회수 1증가 -->
  	<update id="boardHitPlus" parameterType="string">
  		UPDATE BOARD SET HIT = HIT + 1
		WHERE B_IDX = #{b_idx}
  	</update>
  	
  	<!-- 게시글을 본 사람이 주인인지 아닌지 확인 -->
  	<select id="checkHost" parameterType="map" resultType="int">
  		SELECT COUNT(*) FROM BOARD
		WHERE U_IDX = #{u_idx} AND B_IDX = #{b_idx}
  	</select>
  	<!-- 24시간 이내에 댓글이 달린 게시글 불러오기 -->
  	<select id="newComments" parameterType="string" resultType="com.helloworld.vo.BoardVO">
  		SELECT TITLE, B_IDX
		FROM
		(SELECT B.B_IDX, B.U_IDX, B.TITLE, B.CONTENT
		FROM BOARD B, COMMENTS C
		WHERE B.B_IDX = C.B_IDX AND B.U_IDX = #{u_idx}
		AND C.REGDATE > SYSDATE - 1)
		GROUP BY TITLE, B_IDX
  	</select>
  	
  	<!-- 24시간 이내에 작성된 게시글 불러오기  -->
  	<select id="newBoard" parameterType="string" resultType="com.helloworld.vo.BoardVO">
  		SELECT * FROM BOARD
		WHERE U_IDX = #{u_idx}
		AND REGDATE > SYSDATE - 1
		AND ROWNUM = 1
		ORDER BY REGDATE DESC
  	</select>
  	<!-- ================= BOARD 테이블 끝 ================== -->
  	<!-- ==================== 민우 끝 ======================= -->
  	
  	<!-- ==================== 인술 ======================= -->
  	<!-- ================== 회원가입 =================== -->
	<!-- 회원가입 - 중복 아이디 검사용 -->
	<select id ="chkId" resultType="int">
		SELECT COUNT(*) 
		  FROM MEMBER
		 WHERE U_ID = #{id}
	</select>
	
	<!-- 회원가입 - 중복 닉네임 검사용 -->
	<select id ="chkNickname" resultType="int">
		SELECT COUNT(*) 
		  FROM MEMBER
		 WHERE NICKNAME = #{id}
	</select>
	
	<!-- 회원가입 - 회원 가입 정보 입력 -->
	<insert id="insMember" parameterType="map">
		INSERT INTO MEMBER(U_IDX, U_ID, PWD, NICKNAME, NAME, PHONE, BIRTH, EMAIL, GENDER)
			VALUES(MEMBER_SEQ.NEXTVAL, #{id}, #{pwd}, #{nickname}, #{name}, #{phone}, #{birth}, #{email}, #{gender})
	</insert>
	
	<!-- == ID / PASSWORD 찾기 == -->
	<!-- ID 찾기 -->
	<select id="findId" parameterType="map" resultType="string">
      SELECT U_ID
        FROM MEMBER
       WHERE NAME = #{name} AND PHONE = #{phone} AND BIRTH = #{birth}
   	</select>
	
	<!-- PASSWORD 찾기 -->
	<select id="findPwd" parameterType="map" resultType="string">
		SELECT U_IDX
		  FROM MEMBER
		 WHERE U_ID = #{id} AND NAME = #{name} AND PHONE = #{phone} AND BIRTH = #{birth} 
	</select>
	
	<!-- 비밀번호 재설정 -->
	<update id="setPwd" parameterType="map">
		UPDATE MEMBER
		   SET PWD = #{pwd}
		 WHERE U_ID = #{u_id}
	</update>
	
	
	<!-- 사람 찾기 -->
	<!-- 닉네임으로 찾기 -->
	<select id="findPeople" parameterType="map" resultType="com.helloworld.vo.MemberVO">
	SELECT U_IDX, U_ID, NICKNAME, NAME, BIRTH, GENDER
	  FROM MEMBER
	 WHERE NICKNAME LIKE '%'||#{nickname}||'%'
	 ORDER BY NICKNAME
	</select>
	<!-- ================== 회원가입 끝 =================== -->
	<!-- ==================== 인술 끝 ======================= -->
	
	<!-- ===================== 대의 =================== -->
	<select id="guestbook" resultType="com.helloworld.vo.GuestBookVO" parameterType="map">
		SELECT *
  		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY G.G_IDX DESC) AS RNUM, G.* 
          		  FROM GUEST_BOOK G
        		 WHERE G.U_IDX = #{u_idx}
         		 ORDER BY G.G_IDX DESC) A
 	     WHERE RNUM BETWEEN #{startContent} AND #{lastContent}
	</select>
	
	<select id="getUserInfo" resultType="com.helloworld.vo.MemberVO" parameterType="string">
		SELECT * FROM MEMBER WHERE U_IDX = #{u_idx}
	</select>
	
	<select id="getCommentList" resultType="com.helloworld.vo.CommentsVO" parameterType="string">
		SELECT * FROM COMMENTS WHERE G_IDX = #{g_idx} ORDER BY C_IDX
	</select>
	
	<insert id="insertContent" parameterType="map">
		INSERT INTO GUEST_BOOK VALUES (GUEST_BOOK_SEQ.NEXTVAL, #{u_idx}, #{content}, SYSDATE, #{nickname})
	</insert>
	
	<insert id="insertComment" parameterType="map"> <!-- 파라미터 vo에서 map으로 변경 -->
		INSERT INTO COMMENTS (C_IDX, G_IDX, NICKNAME, REGDATE, CONTENT)
		VALUES (COMMENTS_SEQ.NEXTVAL, #{g_idx}, #{nickname}, SYSDATE, #{content})
	</insert>
	
	<delete id="deleteFK" parameterType="string">
		DELETE COMMENTS WHERE G_IDX = #{g_idx}
	</delete>
	
	<delete id="deleteContent" parameterType="string">
		DELETE GUEST_BOOK WHERE G_IDX = #{g_idx}
	</delete>
	
	<delete id="deleteComment" parameterType="string">
		DELETE COMMENTS WHERE C_IDX = #{c_idx}
	</delete>
	
	<update id="updateContent" parameterType="map">
		UPDATE GUEST_BOOK 
 		   SET CONTENT = #{content}
		 WHERE G_IDX = #{g_idx}
	</update>
	<!-- ===================== 대의 끝 ================== -->
	
	<!-- ====================== 해미 ==================== -->
	<!-- id, pw로 회원 객체 1개 조회 -->
	<select id="oneMember" parameterType="map" resultType="memberVO">
		SELECT *
		FROM MEMBER WHERE U_ID = #{id} AND PWD = #{pw}
	</select>
	
	<!-- 전체 다이어리 글 수 조회-->
	<select id="diaryTotalCount" resultType="int" >
		SELECT COUNT(*) AS CNT FROM DIARY
	</select>
	
	<!-- 회원 객체 u_idx 로 작성한 다이어리 글 수 조회-->
	<select id="diaryCount" resultType="int" parameterType="int">
		SELECT COUNT(*) AS CNT FROM DIARY WHERE U_IDX = #{mvo.u_idx}
	</select>
	
	<!-- d_idx 로 해당 다이어리 객체 1개 조회 -->
	<select id="dOne" parameterType="int" resultType="diaryVO">
		SELECT D_IDX, U_IDX, TITLE, CONTENT, REGDATE, HIT
		FROM DIARY
		WHERE D_IDX = #{d_idx}
	</select>
	
	<!-- 회원 객체 u_idx , 시작글 번호(begin), 끝번호(end)로 작성 한 게시글 목록 조회-->
	<select id="dlist" resultType="diaryVO" parameterType="map">
		SELECT D_IDX, U_IDX, TITLE, CONTENT, REGDATE, HIT
		  FROM (SELECT ROWNUM R_NUM, B.*
		          FROM (SELECT *
		                  FROM DIARY
                         WHERE U_IDX = #{uIdx}
		                 ORDER BY D_IDX DESC
		        ) B  
		     )
		 WHERE R_NUM BETWEEN #{begin} AND #{end}
	</select>	
	
	<!-- Diary객체 받아서 글 작성 -->
	<insert id="writeDiary" parameterType="diaryVO">
		INSERT INTO DIARY
				(D_IDX, U_IDX, TITLE, CONTENT, REGDATE, HIT)
		VALUES (DIARY_SEQ.NEXTVAL, #{u_idx}, #{title}, #{content}, SYSDATE, #{hit})
	</insert>
	
	<!-- 다이어리 수정 -->
	<update id="modifyDiary" parameterType="diaryVO">
		UPDATE DIARY SET    
		    TITLE = #{title},
		    CONTENT = #{content},
		    REGDATE = SYSDATE
		WHERE D_IDX = #{d_idx}
	</update>
	
	<!-- 다이어리 삭제 -->
	<delete id="deleteDiary" parameterType="int">
		DELETE DIARY WHERE D_IDX = #{d_idx}
	</delete>
	
	<!-- 다이어리각각 해당하는 댓글 조회 -->
	<select id="dCommentAll" parameterType="int" resultType="CommentsVO">
		SELECT C_IDX, G_IDX, D_IDX, B_IDX, NICKNAME, REGDATE, CONTENT
		FROM COMMENTS
		WHERE D_IDX = #{d_idx}
		ORDER BY C_IDX DESC
	</select>
	
	<!-- 댓글 1개 조회 -->
	<select id="dCommentOne" parameterType="int" resultType="CommentsVO">
		SELECT C_IDX, G_IDX, D_IDX, B_IDX, NICKNAME, REGDATE, CONTENT
		FROM COMMENTS
		WHERE C_IDX = #{c_idx}
	</select>
	
	<!-- 댓글 쓰기 -->
	<insert id="dCommentSet" parameterType="CommentsVO">
		INSERT INTO COMMENTS
		        (C_IDX, D_IDX, NICKNAME, REGDATE, CONTENT)
		VALUES (COMMENTS_SEQ.NEXTVAL, #{d_idx}, #{nickname}, SYSDATE, #{content})
	</insert>
	
	<!-- 댓글 수정 -->
	<update id="dCommentModi" parameterType="CommentsVO">
		UPDATE COMMENTS SET       
		    CONTENT = #{content},
		    REGDATE = SYSDATE
		WHERE C_IDX = #{c_idx}
	</update>
	
	<!-- 댓글 삭제 -->
	<delete id="dCommentDel" parameterType="map">
		DELETE COMMENTS WHERE D_IDX = #{d_idx} AND C_IDX = #{c_idx}
	</delete>
	
	<!-- 24시간 이내에 가장 최근 작성된 다이어리 하나 불러오기  -->
  	<select id="newDiary" parameterType="string" resultType="com.helloworld.vo.DiaryVO">
  		SELECT * FROM DIARY
		WHERE U_IDX = #{u_idx}
		AND REGDATE > SYSDATE - 1
		AND ROWNUM = 1
		ORDER BY REGDATE DESC
  	</select>
  	
  	<!-- 최근에 댓글이 달린 다이어리 불러오기 -->
  	<select id="">
  		SELECT TITLE, D_IDX
		FROM
		(SELECT D.D_IDX, D.U_IDX, D.TITLE
		FROM DIARY D, COMMENTS C
		WHERE D.D_IDX = C.D_IDX AND D.U_IDX = #{u_idx}
		AND C.REGDATE > SYSDATE - 1)
		GROUP BY TITLE, D_IDX
  	</select>
  	
	
	<!-- ====================== 해미 끝 =================== -->
</mapper>